from fastapi import FastAPI, APIRouter, HTTPException, BackgroundTasks, Request
from dotenv import load_dotenv
from starlette.middleware.cors import CORSMiddleware
from motor.motor_asyncio import AsyncIOMotorClient
import os
import logging
from pathlib import Path
from pydantic import BaseModel, Field
from typing import List, Optional
import uuid
from datetime import datetime, timezone, timedelta
import asyncio
import aiohttp
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, CommandStart
from aiogram.types import WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
import openai

ROOT_DIR = Path(__file__).parent
load_dotenv(ROOT_DIR / '.env')

# MongoDB connection
mongo_url = os.environ['MONGO_URL']
client = AsyncIOMotorClient(mongo_url)
db = client[os.environ['DB_NAME']]

# Telegram Bot Setup
BOT_TOKEN = os.environ.get('BOT_TOKEN')
WEBHOOK_PATH = "/webhook/telegram"
WEBAPP_URL = os.environ.get('WEBAPP_URL', 'https://stargazer-12.preview.emergentagent.com')
OPENAI_API_KEY = os.environ.get('OPENAI_API_KEY')

# Initialize OpenAI client
openai.api_key = OPENAI_API_KEY

# Initialize bot and dispatcher
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# Create the main app without a prefix
app = FastAPI()

# Create a router with the /api prefix
api_router = APIRouter(prefix="/api")

# Pydantic Models
class User(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    telegram_id: int
    username: Optional[str] = None
    first_name: Optional[str] = None
    last_name: Optional[str] = None
    birth_date: Optional[str] = None
    birth_time: Optional[str] = None
    birth_place: Optional[str] = None
    subscription_active: bool = False
    subscription_end: Optional[datetime] = None
    free_readings_left: int = 3
    created_at: datetime = Field(default_factory=lambda: datetime.now(timezone.utc))

class UserCreate(BaseModel):
    telegram_id: int
    username: Optional[str] = None
    first_name: Optional[str] = None
    last_name: Optional[str] = None

class BirthData(BaseModel):
    birth_date: str
    birth_time: str
    birth_place: str

class AstrologyReading(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    user_id: str
    telegram_id: int
    question: str
    reading: str
    birth_data: Optional[dict] = None
    created_at: datetime = Field(default_factory=lambda: datetime.now(timezone.utc))

class StatusCheck(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    client_name: str
    timestamp: datetime = Field(default_factory=lambda: datetime.now(timezone.utc))

class StatusCheckCreate(BaseModel):
    client_name: str

# Subscription constants
SUBSCRIPTION_PRICE = 100  # Telegram Stars
SUBSCRIPTION_TITLE = "–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ LunaAura"
SUBSCRIPTION_DESCRIPTION = "–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —á—Ç–µ–Ω–∏—è –Ω–∞ –º–µ—Å—è—Ü ‚ú®"

# Helper Functions
async def get_or_create_user(telegram_user: types.User) -> User:
    """Get existing user or create new one"""
    user_doc = await db.users.find_one({"telegram_id": telegram_user.id})
    
    if user_doc:
        return User(**user_doc)
    
    # Create new user
    user = User(
        telegram_id=telegram_user.id,
        username=telegram_user.username,
        first_name=telegram_user.first_name,
        last_name=telegram_user.last_name,
        free_readings_left=3
    )
    
    await db.users.insert_one(user.dict())
    return user

async def update_birth_data(telegram_id: int, birth_data: BirthData):
    """Update user's birth data"""
    await db.users.update_one(
        {"telegram_id": telegram_id},
        {"$set": {
            "birth_date": birth_data.birth_date,
            "birth_time": birth_data.birth_time,
            "birth_place": birth_data.birth_place
        }}
    )

async def can_get_reading(user_data: dict) -> bool:
    """Check if user can get a reading"""
    # Check if has active subscription
    if user_data.get('subscription_active') and user_data.get('subscription_end'):
        subscription_end = user_data['subscription_end']
        if isinstance(subscription_end, str):
            subscription_end = datetime.fromisoformat(subscription_end.replace('Z', '+00:00'))
        if subscription_end > datetime.now(timezone.utc):
            return True
    
    # Check free readings
    return user_data.get('free_readings_left', 0) > 0

async def use_reading(telegram_id: int):
    """Use one reading"""
    user_doc = await db.users.find_one({"telegram_id": telegram_id})
    if not user_doc:
        return
        
    if not user_doc.get('subscription_active'):
        new_count = max(0, user_doc.get('free_readings_left', 0) - 1)
        await db.users.update_one(
            {"telegram_id": telegram_id},
            {"$set": {"free_readings_left": new_count}}
        )

async def activate_subscription(telegram_id: int):
    """Activate premium subscription for 30 days"""
    subscription_end = datetime.now(timezone.utc) + timedelta(days=30)
    await db.users.update_one(
        {"telegram_id": telegram_id},
        {"$set": {
            "subscription_active": True,
            "subscription_end": subscription_end
        }}
    )

async def generate_astrology_reading(user_data: dict, question: str = "–î–∞–π –º–Ω–µ –æ–±—â–µ–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —á—Ç–µ–Ω–∏–µ") -> str:
    """Generate AI-powered astrology reading using OpenAI"""
    try:
        # Create a comprehensive prompt for astrology reading
        birth_info = ""
        if user_data.get('birth_date') and user_data.get('birth_time') and user_data.get('birth_place'):
            birth_info = f"""
–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user_data['birth_date']}
–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è: {user_data['birth_time']}
–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è: {user_data['birth_place']}
"""
        else:
            birth_info = "–î–∞–Ω–Ω—ã–µ –æ —Ä–æ–∂–¥–µ–Ω–∏–∏ –ø–æ–∫–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã."

        prompt = f"""–¢—ã LunaAura - –º—É–¥—Ä—ã–π –∏ —Å–æ—á—É–≤—Å—Ç–≤—É—é—â–∏–π –∞—Å—Ç—Ä–æ–ª–æ–≥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —á—Ç–µ–Ω–∏—è –¥–ª—è –∂–µ–Ω—â–∏–Ω. 
–¢—ã —Å–æ—á–µ—Ç–∞–µ—à—å –¥—Ä–µ–≤–Ω—é—é –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –º—É–¥—Ä–æ—Å—Ç—å —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –∏–Ω—Å–∞–π—Ç–∞–º–∏.

–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:
–ò–º—è: {user_data.get('first_name', '–î–æ—Ä–æ–≥–∞—è –¥—É—à–∞')}
{birth_info}

–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {question}

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Ç–µ–ø–ª–æ–µ, –ø—Ä–æ–Ω–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —á—Ç–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ:
1. –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å —Å —ç–º–ø–∞—Ç–∏–µ–π –∏ –º—É–¥—Ä–æ—Å—Ç—å—é
2. –í–∫–ª—é—á–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ —Ä–æ–∂–¥–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
3. –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É
4. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π, –∂–µ–Ω—Å—Ç–≤–µ–Ω–Ω–æ-–≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π —Ç–æ–Ω
5. –°–æ–¥–µ—Ä–∂–∏—Ç 150-300 —Å–ª–æ–≤
6. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –º–∞–≥–∏—á–µ—Å–∫–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã

–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ —Ä–æ–∂–¥–µ–Ω–∏–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã, —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è –Ω–∞ –æ–±—â–∏—Ö —Å–æ–≤–µ—Ç–∞—Ö –∏ –ø–æ–æ—â—Ä–∏ –∏—Ö –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–æ–∂–¥–µ–Ω–∏–∏ –¥–ª—è –±–æ–ª–µ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á—Ç–µ–Ω–∏–π.
–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
"""

        client = openai.OpenAI(api_key=OPENAI_API_KEY)
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=400,
            temperature=0.7
        )
        
        return response.choices[0].message.content.strip()
    
    except Exception as e:
        logger.error(f"Error generating astrology reading: {e}")
        return "–°–µ–π—á–∞—Å —É –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –∫–æ—Å–º–∏—á–µ—Å–∫–∏–º —ç–Ω–µ—Ä–≥–∏—è–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–≥–Ω–æ–≤–µ–Ω–∏–µ. ‚ú®"

# Telegram Bot Handlers
@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    """Handle /start command"""
    user = await get_or_create_user(message.from_user)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üåü –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ LunaAura", 
            web_app=WebAppInfo(url=WEBAPP_URL)
        )],
        [
            InlineKeyboardButton(text="üîÆ –ü–æ–ª—É—á–∏—Ç—å —á—Ç–µ–Ω–∏–µ", callback_data="get_reading"),
            InlineKeyboardButton(text="üí´ –ü–æ–¥–ø–∏—Å–∫–∞", callback_data="subscription")
        ],
        [InlineKeyboardButton(text="üåô –£–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–æ–∂–¥–µ–Ω–∏—è", callback_data="set_birth_data")]
    ])
    
    subscription_status = ""
    if user.subscription_active:
        subscription_status = "üíé –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞"
    else:
        subscription_status = f"‚ú® –û—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —á—Ç–µ–Ω–∏–π: {user.free_readings_left}"
    
    welcome_text = f"""üåô –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ LunaAura, {user.first_name or '–ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –¥—É—à–∞'}! 

–Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–∞—Å—Ç—Ä–æ–ª–æ–≥, –≥–æ—Ç–æ–≤—ã–π –¥–∞—Ç—å —Ç–µ–±–µ –∫–æ—Å–º–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –∏ –æ–∑–∞—Ä–µ–Ω–∏—è.

‚ú® –ß—Ç–æ —è –º–æ–≥—É –¥–ª—è —Ç–µ–±—è —Å–¥–µ–ª–∞—Ç—å:
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —á—Ç–µ–Ω–∏—è
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫–æ—Å–º–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã  
‚Ä¢ –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ª—é–±–≤–∏, –∫–∞—Ä—å–µ—Ä–µ –∏ –∂–∏–∑–Ω–∏
‚Ä¢ –°–≤—è–∑—å —Å –º—É–¥—Ä–æ—Å—Ç—å—é –∑–≤–µ–∑–¥

{subscription_status}

üåü –° —á–µ–≥–æ –Ω–∞—á–Ω–µ–º —Ç–≤–æ–µ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ?"""

    await message.answer(welcome_text, reply_markup=keyboard)

@dp.callback_query(F.data == "subscription")
async def process_subscription(callback_query: types.CallbackQuery):
    """Handle subscription callback"""
    await callback_query.answer()
    
    user_doc = await db.users.find_one({"telegram_id": callback_query.from_user.id})
    
    # Check if already has active subscription
    if user_doc and user_doc.get('subscription_active'):
        subscription_end = user_doc.get('subscription_end')
        if isinstance(subscription_end, str):
            subscription_end = datetime.fromisoformat(subscription_end.replace('Z', '+00:00'))
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üåü –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=WEBAPP_URL))],
            [InlineKeyboardButton(text="üîÆ –ü–æ–ª—É—á–∏—Ç—å —á—Ç–µ–Ω–∏–µ", callback_data="get_reading")]
        ])
        
        await callback_query.message.answer(
            f"üíé –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞!\n\n"
            f"‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {subscription_end.strftime('%d.%m.%Y')}\n\n"
            f"‚ú® –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–º–∏ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ —á—Ç–µ–Ω–∏—è–º–∏!",
            reply_markup=keyboard
        )
        return
    
    # Show subscription options
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚≠ê –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É (100 Stars)", callback_data="buy_subscription")],
        [InlineKeyboardButton(text="üîÆ –ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ —á—Ç–µ–Ω–∏–µ", callback_data="get_reading")],
        [InlineKeyboardButton(text="üåü –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=WEBAPP_URL))]
    ])
    
    subscription_text = f"""üí´ **–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ LunaAura**

üåü **–ß—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç:**
‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —á—Ç–µ–Ω–∏—è
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã  
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞

üíé **–¶–µ–Ω–∞:** 100 Telegram Stars (‚âà $2)
‚è∞ **–ü–µ—Ä–∏–æ–¥:** 30 –¥–Ω–µ–π

‚ú® –ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ {user_doc.get('free_readings_left', 3) if user_doc else 3} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —á—Ç–µ–Ω–∏—è."""

    await callback_query.message.answer(subscription_text, parse_mode="Markdown", reply_markup=keyboard)

@dp.callback_query(F.data == "buy_subscription")
async def process_buy_subscription(callback_query: types.CallbackQuery):
    """Handle buy subscription callback"""
    await callback_query.answer()
    
    # Create invoice for Telegram Stars
    prices = [LabeledPrice(label=SUBSCRIPTION_TITLE, amount=SUBSCRIPTION_PRICE)]
    
    try:
        await bot.send_invoice(
            chat_id=callback_query.from_user.id,
            title=SUBSCRIPTION_TITLE,
            description=SUBSCRIPTION_DESCRIPTION,
            payload=f"subscription_{callback_query.from_user.id}_{datetime.now().timestamp()}",
            provider_token="",  # Empty for Telegram Stars
            currency="XTR",  # Telegram Stars currency
            prices=prices
        )
    except Exception as e:
        logger.error(f"Error sending invoice: {e}")
        await callback_query.message.answer(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )

@dp.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    """Handle pre-checkout query"""
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@dp.message(F.successful_payment)
async def process_successful_payment(message: types.Message):
    """Handle successful payment"""
    try:
        # Activate subscription
        await activate_subscription(message.from_user.id)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÆ –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–º–∏—É–º —á—Ç–µ–Ω–∏–µ", callback_data="get_reading")],
            [InlineKeyboardButton(text="üåü –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=WEBAPP_URL))]
        ])
        
        await message.answer(
            f"üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!** –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\n"
            f"üíé –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫:\n"
            f"‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–º –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º —á—Ç–µ–Ω–∏—è–º\n"
            f"‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–æ–≤–µ—Ç–∞–º\n"
            f"‚Ä¢ –í—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n\n"
            f"‚ú® –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π. –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –º–∞–≥–∏–µ–π –∑–≤–µ–∑–¥!",
            parse_mode="Markdown",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"Error processing payment: {e}")
        await message.answer(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π –ø–æ–¥–ø–∏—Å–∫–∏, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )

@dp.callback_query(F.data == "get_reading")
async def process_get_reading(callback_query: types.CallbackQuery):
    """Handle get reading callback"""
    await callback_query.answer()
    
    user_doc = await db.users.find_one({"telegram_id": callback_query.from_user.id})
    
    if not user_doc:
        await callback_query.message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
        return
    
    # Check if can get reading
    if not await can_get_reading(user_doc):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚≠ê –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_subscription")],
            [InlineKeyboardButton(text="üåü –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=WEBAPP_URL))]
        ])
        
        await callback_query.message.answer(
            "üòî –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —á—Ç–µ–Ω–∏—è.\n\n"
            "üí´ –û—Ñ–æ—Ä–º–∏—Ç–µ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –º—É–¥—Ä–æ—Å—Ç–∏ –∑–≤–µ–∑–¥!",
            reply_markup=keyboard
        )
        return
    
    # Generate reading
    reading = await generate_astrology_reading(user_doc or {})
    
    # Use reading
    await use_reading(callback_query.from_user.id)
    
    # Save reading to database
    reading_obj = AstrologyReading(
        user_id=user_doc.get('id') if user_doc else str(uuid.uuid4()),
        telegram_id=callback_query.from_user.id,
        question="–û–±—â–µ–µ —á—Ç–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞",
        reading=reading,
        birth_data=user_doc if user_doc else None
    )
    
    await db.readings.insert_one(reading_obj.dict())
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üåü –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=WEBAPP_URL))],
        [InlineKeyboardButton(text="üîÆ –ï—â–µ –æ–¥–Ω–æ —á—Ç–µ–Ω–∏–µ", callback_data="get_reading")]
    ])
    
    await callback_query.message.answer(f"üåü **–í–∞—à–µ —á—Ç–µ–Ω–∏–µ –æ—Ç LunaAura** ‚ú®\n\n{reading}", 
                                       parse_mode="Markdown", reply_markup=keyboard)

@dp.callback_query(F.data == "set_birth_data")
async def process_set_birth_data(callback_query: types.CallbackQuery):
    """Handle set birth data callback"""
    await callback_query.answer()
    
    instructions = """üåô **–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Ä–æ–∂–¥–µ–Ω–∏—è** 

–î–ª—è —Å–∞–º—ã—Ö —Ç–æ—á–Ω—ã—Ö –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á—Ç–µ–Ω–∏–π –º–Ω–µ –Ω—É–∂–Ω–∞ –≤–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ–∂–¥–µ–Ω–∏–∏.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:
`–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú –ì–æ—Ä–æ–¥, –°—Ç—Ä–∞–Ω–∞`

–ü—Ä–∏–º–µ—Ä:
`1995-08-15 14:30 –ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è`

–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤–∞—à—É –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É –∏ –¥–∞—Ç—å –≥–ª—É–±–æ–∫–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ—Å–º–∏—á–µ—Å–∫–∏–µ –æ–∑–∞—Ä–µ–Ω–∏—è! ‚ú®"""

    await callback_query.message.answer(instructions, parse_mode="Markdown")

@dp.message()
async def handle_messages(message: types.Message):
    """Handle all other messages"""
    text = message.text.strip()
    
    # Check if it's birth data format
    if len(text.split()) >= 3 and any(char.isdigit() for char in text):
        try:
            parts = text.split(' ', 2)
            if len(parts) >= 3:
                date_part = parts[0]
                time_part = parts[1]
                place_part = parts[2]
                
                # Simple validation
                if '-' in date_part and ':' in time_part:
                    birth_data = BirthData(
                        birth_date=date_part,
                        birth_time=time_part,
                        birth_place=place_part
                    )
                    
                    await update_birth_data(message.from_user.id, birth_data)
                    
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîÆ –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ", callback_data="get_reading")],
                        [InlineKeyboardButton(text="üåü –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=WEBAPP_URL))]
                    ])
                    
                    await message.answer(
                        f"üåô –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –Ø —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Ä–æ–∂–¥–µ–Ω–∏—è:\n"
                        f"üìÖ –î–∞—Ç–∞: {date_part}\n"
                        f"‚è∞ –í—Ä–µ–º—è: {time_part}\n"
                        f"üìç –ú–µ—Å—Ç–æ: {place_part}\n\n"
                        f"–¢–µ–ø–µ—Ä—å —è –º–æ–≥—É –¥–∞—Ç—å –≤–∞–º –≥–ª—É–±–æ–∫–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —á—Ç–µ–Ω–∏—è! ‚ú®",
                        reply_markup=keyboard
                    )
                    return
        except Exception as e:
            logger.error(f"Error processing birth data: {e}")
    
    # Treat as question for astrology reading
    user_doc = await db.users.find_one({"telegram_id": message.from_user.id})
    if not user_doc:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return
    
    # Check if can get reading
    if not await can_get_reading(user_doc):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚≠ê –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_subscription")]
        ])
        
        await message.answer(
            "üòî –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —á—Ç–µ–Ω–∏—è.\n\n"
            "üí´ –û—Ñ–æ—Ä–º–∏—Ç–µ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!",
            reply_markup=keyboard
        )
        return
    
    # Generate personalized reading
    reading = await generate_astrology_reading(user_doc, text)
    
    # Use reading
    await use_reading(message.from_user.id)
    
    # Save reading
    reading_obj = AstrologyReading(
        user_id=user_doc.get('id', str(uuid.uuid4())),
        telegram_id=message.from_user.id,
        question=text,
        reading=reading,
        birth_data=user_doc
    )
    
    await db.readings.insert_one(reading_obj.dict())
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üåü –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=WEBAPP_URL))],
        [InlineKeyboardButton(text="üîÆ –ó–∞–¥–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å", callback_data="get_reading")]
    ])
    
    await message.answer(f"‚ú® **–í–∞—à–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ** üåü\n\n{reading}", 
                        parse_mode="Markdown", reply_markup=keyboard)

# API Routes
@api_router.get("/")
async def root():
    return {"message": "LunaAura API - –í–∞—à–∏ –∫–æ—Å–º–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –∂–¥—É—Ç ‚ú®"}

@api_router.post("/status", response_model=StatusCheck)
async def create_status_check(input: StatusCheckCreate):
    status_dict = input.dict()
    status_obj = StatusCheck(**status_dict)
    _ = await db.status_checks.insert_one(status_obj.dict())
    return status_obj

@api_router.get("/status", response_model=List[StatusCheck])
async def get_status_checks():
    status_checks = await db.status_checks.find().to_list(1000)
    return [StatusCheck(**status_check) for status_check in status_checks]

@api_router.get("/user/{telegram_id}")
async def get_user_profile(telegram_id: int):
    """Get user profile by telegram ID"""
    user_doc = await db.users.find_one({"telegram_id": telegram_id})
    if not user_doc:
        raise HTTPException(status_code=404, detail="User not found")
    return User(**user_doc)

@api_router.get("/readings/{telegram_id}")
async def get_user_readings(telegram_id: int):
    """Get all readings for a user"""
    readings = await db.readings.find({"telegram_id": telegram_id}).sort("created_at", -1).to_list(100)
    return [AstrologyReading(**reading) for reading in readings]

@api_router.post("/webhook/telegram")
async def telegram_webhook(request: Request):
    """Handle Telegram webhook"""
    try:
        json_data = await request.json()
        update = types.Update(**json_data)
        
        # Log incoming update for debugging
        logger.info(f"Received update: {update.update_id} from user {update.message.from_user.id if update.message else 'unknown'}")
        
        await dp.feed_update(bot, update)
        return {"ok": True}
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return {"ok": False}

# Include the router in the main app
app.include_router(api_router)

# Add Telegram webhook endpoint to main app
@app.post("/webhook/telegram")
async def telegram_webhook_main(request: Request):
    return await telegram_webhook(request)

app.add_middleware(
    CORSMiddleware,
    allow_credentials=True,
    allow_origins=os.environ.get('CORS_ORIGINS', '*').split(','),
    allow_methods=["*"],
    allow_headers=["*"],
)

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

@app.on_event("startup")
async def startup_event():
    """Set webhook on startup"""
    try:
        webhook_url = f"{os.environ.get('REACT_APP_BACKEND_URL', WEBAPP_URL)}/api/webhook/telegram"
        # Delete existing webhook first
        await bot.delete_webhook()
        # Set new webhook
        await bot.set_webhook(webhook_url)
        logger.info(f"Webhook set to: {webhook_url}")
        
        # Test bot connection
        me = await bot.get_me()
        logger.info(f"Bot connected: @{me.username} (ID: {me.id})")
    except Exception as e:
        logger.error(f"Failed to set webhook: {e}")

@app.on_event("shutdown")
async def shutdown_db_client():
    client.close()
    await bot.session.close()